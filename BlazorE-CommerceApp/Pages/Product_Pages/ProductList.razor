@page "/product"
@using System.Globalization
@using BlazorE_CommerceApp.Dtos.ProductDtos

@inject IProductService _productService
@inject IJSRuntime _JSRuntime

<BsModal OnModalConfirmation="ConfirmDelete_Click"
    ButtonBootstrapStyle="btn-danger"
    ButtonText="Delete"
    Title="Are you sure you want to delete this product?"></BsModal>

@if (IsProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading..." />
    </div>
}
else
{
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-gradient ml-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">Product List</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <div class="row pb-3">
                <div class="col-12 text-end">
                    <a href="product/create" class="btn btn-lg btn-secondary" style="width:250px">
                        <i class="bi bi-plus-square"></i> Add New Product
                    </a>
                </div>
            </div>
            @if (Products.Any())
            {
                <table class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Price</th>
                            <th>Special Tag</th>
                            <th>Category</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var obj in Products)
                        {
                            <tr>
                                <td>
                                    @obj.ProductName
                                </td>
                                <td>@obj.ProductPrice.ToString("C", CultureInfo.GetCultureInfo("en-IN"))</td>
                                <td>@obj.SpecialTag</td>
                                <td>@obj.Category.CategoryName</td>
                                <td>
                                    <a href="@($"/product/update/{obj.ProductId}")" class="btn btn-primary"><i class="bi bi-pencil"></i> Edit</a>
                                    <button class="btn btn-danger" @onclick="() => HandleDelete(obj.ProductId)">
                                        <i class="bi bi-trash"></i> Delte
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
}
@code {
    private bool IsProcessing { get; set; } = true;
    private IEnumerable<ProductDto> Products { get; set; } = new List<ProductDto>();
    private int DeleteProductId { get; set; } = 0;

    /*protected override async Task OnInitializedAsync()
    {
        //note that IsProcessing should be false here. If we are using server interactivity then this might cause problem at times.
        //the reason for that is pre-rendering and hence LoadProducts might be called twice in that case. Here I guess this would work well.
        IsProcessing = true;
        await LoadProducts();
    IsProcessing = false;
    }*/

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProducts();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadProducts()
    {
        Products = await _productService.GetAllProductsAsync();
    }

    private void HandleDelete(int id)
    {
        DeleteProductId = id;
        _JSRuntime.InvokeVoidAsync("ShowConfirmationModal");
    }

    private async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsProcessing = true;
        await _JSRuntime.InvokeVoidAsync("HideConfirmationModal");
        if (isConfirmed && DeleteProductId != 0)
        {
            var result = await _productService.DeleteProductAsync(DeleteProductId);
            if (result)
            {
                _JSRuntime?.ToastrSuccess("Product Delted Successfully!");
            }
            else
            {
                _JSRuntime?.ToastrError("Error Encountered while deleting!");
            }

            await LoadProducts();
        }
        DeleteProductId = 0;
        IsProcessing = false;
    }
}
