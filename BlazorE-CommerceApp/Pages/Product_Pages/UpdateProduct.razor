@page "/product/update/{id:int}"

@using BlazorE_CommerceApp.Dtos.ProductDtos
@using BlazorE_CommerceApp.Dtos.CategoryDtos
@inject IProductService _productService
@inject ICategoryService _categoryService
@inject NavigationManager _navigationManager
@inject IJSRuntime _JSRuntime


@if (IsProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading..." />
    </div>
}
else
{
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-gradient ml-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">Update Product</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <EditForm Model="updateProductDto" FormName="updateProductForm" OnValidSubmit="EditProduct">
                <DataAnnotationsValidator />

                <div class="border p-3 mt-4">
                    <div class="form-floating py-3 col-12">
                        <InputText @bind-Value="updateProductDto.ProductName" class="form-control" id="ProductName" placeholder="Name"></InputText>
                        <label for="ProductName">Name</label>
                        <ValidationMessage For="@(() => updateProductDto.ProductName)"></ValidationMessage>
                    </div>


                    <div class="form-floating py-3 col-12">
                        <InputText @bind-Value="updateProductDto.ProductDescription" class="form-control" id="ProductDescription" placeholder="Description"></InputText>
                        <label for="ProductDescription">Description</label>
                        <ValidationMessage For="@(() => updateProductDto.ProductDescription)"></ValidationMessage>
                    </div>

                    <div class="form-floating py-3 col-12">
                        <InputNumber @bind-Value="updateProductDto.ProductPrice" class="form-control" id="ProductPrice" placeholder="Price"></InputNumber>
                        <label for="ProductPrice">Price</label>
                        <ValidationMessage For="@(() => updateProductDto.ProductPrice)"></ValidationMessage>
                    </div>

                    <div class="form-floating py-3 col-12">
                        <InputSelect @bind-Value="updateProductDto.CategoryId" class="form-select" id="category" placeholder="Price">
                            <option value="0" disabled selected>--Select Category--</option>
                            @foreach (var category in _categories)
                            {
                                <option value="@category.CategoryId">@category.CategoryName</option>
                            }
                        </InputSelect>

                        <label for="category">Category</label>
                        <ValidationMessage For="@(() => updateProductDto.CategoryId)"></ValidationMessage>
                    </div>
                    <div class="form-floating py-3 col-12">
                        <InputFile OnChange="LoadFiles" class="form-control" id="customFile" accept="image/x-png,image/jpeg"></InputFile>
                        <label for="customFile">Upload Image</label>
                    </div>

                    <div class="row mt-3">
                        <div class="col-6 col-md-3">
                            <button type="submit" class="btn btn-primary form-control" disabled="@IsProcessing">
                                <i class="bi bi-floppy2"></i> Update
                            </button>
                        </div>
                        <div class="col-6 col-md-3">
                            <a href="product" class="btn btn-secondary form-control" disabled="@IsProcessing">
                                <i class="bi bi-arrow-bar-left"></i> Back to List
                            </a>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}


@code {
    [Parameter]
    public int Id { get; set; }
    [SupplyParameterFromForm(FormName = "updateProductForm")]
    private UpdateProductDto updateProductDto { get; set; } = new UpdateProductDto();
    private bool IsProcessing { get; set; } = true;

    private IEnumerable<CategoryDto> _categories = new List<CategoryDto>();

    private string? _directoryPath { get; set; }

    protected override Task OnInitializedAsync()
    {
        _directoryPath = Path.Combine();
        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProductAndCategoryList();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadProductAndCategoryList()
    {
        if(Id > 0)
        {
            var productDto = await _productService.GetProductByIdAsync(Id);
            _categories = await _categoryService.GetAllCategoriesAsync();
            updateProductDto.ProductId = productDto.ProductId;
            updateProductDto.ProductName = productDto.ProductName;
            updateProductDto.ProductDescription = productDto.ProductDescription;
            updateProductDto.CategoryId = productDto.CategoryId;
            updateProductDto.ProductPrice = productDto.ProductPrice;
        }
    }

    private async Task EditProduct()
    {
        IsProcessing = true;
        if(updateProductDto.ProductId > 0)
        {
            await _productService.UpdateProductAsync(updateProductDto);
            await _JSRuntime.ToastrSuccess("Product Updated Successfully!");

            IsProcessing = false;
        }
        _navigationManager.NavigateTo("product");
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        IsProcessing = true;
        var file = e.File;
        FileInfo fileInfo = new(file.Name);
        var newFileName = $"{Guid.NewGuid}.{fileInfo.Extension}"; 


        IsProcessing = false;
    }
}
